"use client";

import React, { useEffect, useState } from 'react';
import { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';
import { Text } from '@/shared/ui/Text';
import { VStack } from '@/shared/ui/VStack';
import styles from './MachineLock.module.scss';

interface MachineLockProps {
  children: React.ReactNode;
}

export const MachineLock: React.FC<MachineLockProps> = ({ children }) => {
  const [connection, setConnection] = useState<HubConnection | null>(null);
  const [isMachineAvailable, setIsMachineAvailable] = useState<boolean | null>(null);
  const [isConnecting, setIsConnecting] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let currentConnection: HubConnection | null = null;
    
    const startConnection = async () => {
      try {
        currentConnection = new HubConnectionBuilder()
          .withUrl(`${process.env.NEXT_PUBLIC_API_URL || 'https://localhost:7280'}/vendingMachineHub`)
          .withAutomaticReconnect()
          .build();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        currentConnection.on('MachineAvailable', () => {
          setIsMachineAvailable(true);
          setError(null);
        });

        currentConnection.on('MachineOccupied', () => {
          setIsMachineAvailable(false);
          setError(null);
        });

        currentConnection.on('MachineBusy', (message: string) => {
          setIsMachineAvailable(false);
          setError(message);
        });

        currentConnection.on('MachineForceReleased', (message: string) => {
          setIsMachineAvailable(false);
          setError(message);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        currentConnection.onclose((error) => {
          if (error) {
            setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            setIsMachineAvailable(false);
          }
        });

        await currentConnection.start();
        setConnection(currentConnection);
        setIsConnecting(false);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ConnectionId –≤ localStorage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö
        localStorage.setItem('machineConnectionId', currentConnection.connectionId || '');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        await currentConnection.invoke('CheckMachineStatus');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SignalR:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        setIsConnecting(false);
        setIsMachineAvailable(false);
      }
    };

    startConnection();

    return () => {
      if (currentConnection) {
        currentConnection.stop();
      }
    };
  }, []); // –£–±–∏—Ä–∞–µ–º connection –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (isConnecting) {
    return (
      <div className={styles.overlay}>
        <VStack gap="md" align="center">
          <Text size="xl">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–≤—Ç–æ–º–∞—Ç—É...</Text>
        </VStack>
      </div>
    );
  }

  // –ê–≤—Ç–æ–º–∞—Ç –∑–∞–Ω—è—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (isMachineAvailable === false) {
    return (
      <div className={styles.overlay}>
        <VStack gap="lg" align="center">
          <div className={styles.busyIcon}>üö´</div>
          <Text size="2xl" color="error" weight="bold">
            {error || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç –∑–∞–Ω—è—Ç'}
          </Text>
          <Text size="lg" color="secondary">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏—Ç –ø–æ–∫—É–ø–∫—É
          </Text>
        </VStack>
      </div>
    );
  }

  // –ê–≤—Ç–æ–º–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  if (isMachineAvailable === true) {
    return <>{children}</>;
  }

  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (null), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  return (
    <div className={styles.overlay}>
      <VStack gap="md" align="center">
        <Text size="xl">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∞...</Text>
      </VStack>
    </div>
  );
};
